// 2. Insert Problems and Test Cases
    const problems = [
      {
        id: 'A',
        title: 'FIZZ BUZZ',
   description: `"Fizz buzz" is a word game we will use to teach the robots about division. Let's learn computers. You should write a function that will receive a positive integer and return:
"Fizz Buzz" if the number is divisible by 3 and by 5;
"Fizz" if the number is divisible by 3;
"Buzz" if the number is divisible by 5;
The number as a string for other cases.`,
        input_description: 'One integers a',
        output_description: 'One String: "Fizz" "Buzz" "Fizz Buzz" "Integer a"',
       sample_input: '15',
sample_output: 'Fizz Buzz',
test_cases: [
  { input: '15', output: 'Fizz Buzz', is_sample: true },
  { input: '3', output: 'Fizz', is_sample: false },
  { input: '5', output: 'Buzz', is_sample: false },
  { input: '9', output: 'Fizz', is_sample: false },
  { input: '10', output: 'Buzz', is_sample: false },
  { input: '30', output: 'Fizz Buzz', is_sample: false },
  { input: '7', output: '7', is_sample: false },
  { input: '8', output: '8', is_sample: false },
  { input: '13', output: '13', is_sample: false },
  { input: '18', output: 'Fizz', is_sample: false },
  { input: '20', output: 'Buzz', is_sample: false },
  { input: '21', output: 'Fizz', is_sample: false },
  { input: '25', output: 'Buzz', is_sample: false },
  { input: '33', output: 'Fizz', is_sample: false },
  { input: '35', output: 'Buzz', is_sample: false },
  { input: '45', output: 'Fizz Buzz', is_sample: false },
  { input: '46', output: '46', is_sample: false },
  { input: '60', output: 'Fizz Buzz', is_sample: false },
  { input: '99', output: 'Fizz', is_sample: false },
  { input: '100', output: 'Buzz', is_sample: false }],
      },
      {
        id: 'B',
        title: 'Reverse Integer',
        description: 'Reverse the digits of a given integer. For instance, 1234 should become 4321. For negative integers, the sign should remain in the front; e.g., -123 becomes -321.',
        input_description: 'A single integer',
        output_description: 'Output reversed integer',
        sample_input: '1234',
sample_output: '4321',
test_cases: [
  { input: '1234', output: '4321', is_sample: true },
  { input: '-123', output: '-321', is_sample: false },
  { input: '1200', output: '21', is_sample: false },
  { input: '-1200', output: '-21', is_sample: false },
  { input: '5', output: '5', is_sample: false },
  { input: '-5', output: '-5', is_sample: false },
  { input: '100', output: '1', is_sample: false },
  { input: '-100', output: '-1', is_sample: false },
  { input: '987654321', output: '123456789', is_sample: false },
  { input: '-987654321', output: '-123456789', is_sample: false },
  { input: '808', output: '808', is_sample: false },
  { input: '-808', output: '-808', is_sample: false },
  { input: '90', output: '9', is_sample: false },
  { input: '-90', output: '-9', is_sample: false },
  { input: '7070', output: '707', is_sample: false },
  { input: '-7070', output: '-707', is_sample: false },
  { input: '2468', output: '8642', is_sample: false },
  { input: '-2468', output: '-8642', is_sample: false },
  { input: '13579', output: '97531', is_sample: false },
  { input: '-13579', output: '-97531', is_sample: false }
],
      },
      {
        id: 'C',
        title: 'Palindrome number',
        description: 'Given an integer x, print true if x is a palindrome, and false otherwise.\n 121 reads as 121 from left to right and from right to left it is palindrome\n From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.',
        input_description: 'First line n, then n integers.',
        output_description: 'The maximum number.',
        sample_input: '121',
sample_output: 'Yes',
test_cases: [
  { input: '121', output: 'Yes', is_sample: true },
  { input: '-121', output: 'No', is_sample: false },
  { input: '1221', output: 'Yes', is_sample: false },
  { input: '-1221', output: 'No', is_sample: false },
  { input: '12321', output: 'Yes', is_sample: false },
  { input: '-12321', output: 'No', is_sample: false },
  { input: '1', output: 'Yes', is_sample: false },
  { input: '-1', output: 'No', is_sample: false },
  { input: '0', output: 'Yes', is_sample: false },
  { input: '11', output: 'Yes', is_sample: false },
  { input: '123', output: 'No', is_sample: false },
  { input: '-123', output: 'No', is_sample: false },
  { input: '1001', output: 'Yes', is_sample: false },
  { input: '-1001', output: 'No', is_sample: false },
  { input: '1331', output: 'Yes', is_sample: false },
  { input: '-1331', output: 'No', is_sample: false },
  { input: '1234321', output: 'Yes', is_sample: false },
  { input: '-1234321', output: 'No', is_sample: false },
  { input: '987789', output: 'Yes', is_sample: false },
  { input: '-987789', output: 'No', is_sample: false }
],
      },
      {
        id: 'D',
        title: 'Two Sum',
        description: `Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.`,
        input_description: 'First line n t, n is the list length and t is the target value\n second line contains the list.',
        output_description: 'Index of first number then secound number',
       sample_input: '4 9\n2 7 11 15',
sample_output: '0 1',
test_cases: [
  { input: '4 9\n2 7 11 15', output: '0 1', is_sample: true },
  { input: '3 6\n3 2 4', output: '1 2', is_sample: false },
  { input: '2 6\n3 3', output: '0 1', is_sample: false },
  { input: '3 4\n1 2 3', output: '0 2', is_sample: false },
  { input: '5 9\n1 2 3 4 5', output: '3 4', is_sample: false },
  { input: '4 50\n10 20 30 40', output: '1 2', is_sample: false },
  { input: '5 -8\n-1 -2 -3 -4 -5', output: '2 4', is_sample: false },
  { input: '4 1\n-1 0 1 2', output: '0 3', is_sample: false },
  { input: '3 100\n5 75 25', output: '1 2', is_sample: false },
  { input: '4 10\n2 5 5 11', output: '1 2', is_sample: false },
  { input: '4 100\n99 1 2 3', output: '0 1', is_sample: false },
  { input: '2 8\n4 4', output: '0 1', is_sample: false },
  { input: '3 0\n-10 20 10', output: '0 2', is_sample: false },
  { input: '6 10\n8 7 2 5 3 1', output: '0 2', is_sample: false },
  { input: '5 16\n1 3 5 7 9', output: '2 4', is_sample: false },
  { input: '4 15\n6 3 8 12', output: '0 1', is_sample: false },
  { input: '4 0\n0 4 3 0', output: '0 3', is_sample: false },
  { input: '4 10\n2 4 6 8', output: '0 3', is_sample: false },
  { input: '4 0\n-3 4 3 90', output: '0 2', is_sample: false },
  { input: '5 5\n7 -2 5 0 3', output: '1 4', is_sample: false }
],
      }, 
      {
        id: 'E',
        title: 'Roman to Integer',
        description: `Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.`,
        input_description: 'First line string the roman number',
        output_description: 'The integer represented by the roman number',
sample_input: 'III',
sample_output: '3',
test_cases: [
  { input: 'III', output: '3', is_sample: true },
  { input: 'IV', output: '4', is_sample: false },
  { input: 'IX', output: '9', is_sample: false },
  { input: 'LVIII', output: '58', is_sample: false },   // L(50) + V(5) + III(3)
  { input: 'MCMXCIV', output: '1994', is_sample: false }, // M(1000) + CM(900) + XC(90) + IV(4)
  { input: 'XL', output: '40', is_sample: false },
  { input: 'XC', output: '90', is_sample: false },
  { input: 'CD', output: '400', is_sample: false },
  { input: 'CM', output: '900', is_sample: false },
  { input: 'MMXXV', output: '2025', is_sample: false },
  { input: 'I', output: '1', is_sample: false },
  { input: 'II', output: '2', is_sample: false },
  { input: 'XIII', output: '13', is_sample: false },
  { input: 'XX', output: '20', is_sample: false },
  { input: 'XLIV', output: '44', is_sample: false }, // XL(40) + IV(4)
  { input: 'XCIX', output: '99', is_sample: false }, // XC(90) + IX(9)
  { input: 'CDXLIV', output: '444', is_sample: false }, // CD(400) + XL(40) + IV(4)
  { input: 'DCCC', output: '800', is_sample: false },
  { input: 'MCD', output: '1400', is_sample: false },
  { input: 'MMMCMXCIX', output: '3999', is_sample: false } // Max standard Roman numeral
]
,
      },
           {
        id: 'F',
        title: 'Jump Game',
        description: `You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.
 `,
        input_description: 'First line n, n is the list length.\n second line contains the length',
        output_description: 'true or false',
       sample_input: '5\n2 3 1 1 4',
sample_output: 'true',
test_cases: [
  { input: '5\n2 3 1 1 4', output: 'true', is_sample: true },
  { input: '5\n3 2 1 0 4', output: 'false', is_sample: false },
  { input: '1\n0', output: 'true', is_sample: false },
  { input: '2\n1 0', output: 'true', is_sample: false },
  { input: '2\n0 1', output: 'false', is_sample: false },
  { input: '6\n2 0 0 0 0 1', output: 'false', is_sample: false },
  { input: '6\n4 2 0 0 1 0', output: 'true', is_sample: false },
  { input: '5\n1 1 1 1 1', output: 'true', is_sample: false },
  { input: '5\n2 0 2 0 1', output: 'true', is_sample: false },
  { input: '5\n2 0 0 0 1', output: 'false', is_sample: false },
  { input: '7\n3 2 2 0 0 0 1', output: 'false', is_sample: false },
  { input: '7\n3 2 2 0 0 1 0', output: 'true', is_sample: false },
  { input: '8\n5 0 0 0 0 0 0 1', output: 'false', is_sample: false },
  { input: '8\n5 0 0 0 0 0 1 0', output: 'true', is_sample: false },
  { input: '4\n2 2 0 0', output: 'true', is_sample: false },
  { input: '4\n1 0 0 0', output: 'false', is_sample: false },
  { input: '5\n4 0 0 0 0', output: 'true', is_sample: false },
  { input: '5\n3 0 0 0 1', output: 'false', is_sample: false },
  { input: '5\n3 0 0 1 0', output: 'true', is_sample: false },
  { input: '6\n2 3 1 0 4 0', output: 'true', is_sample: false }
]
,
      },
      {
        id: 'G',
        title: 'Jump Game II',
        description: `You are given a 0-indexed array of integers nums of length n. You are initially positioned at index 0.

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at index i, you can jump to any index (i + j) where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach index n - 1. The test cases are generated such that you can reach index n - 1.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [2,3,0,1,4]
Output: 2
 `,
        input_description: 'First line n t, n is the list length\n second line contains the list.',
        output_description: 'Integer minimum jump',
       sample_input: '5\n2 3 1 1 4',
sample_output: '2',
test_cases: [
  { input: '5\n2 3 1 1 4', output: '2', is_sample: true },
  { input: '5\n2 3 0 1 4', output: '2', is_sample: false },
  { input: '2\n1 0', output: '1', is_sample: false },
  { input: '3\n1 1 1', output: '2', is_sample: false },
  { input: '4\n2 1 1 1', output: '2', is_sample: false },
  { input: '4\n3 1 1 0', output: '1', is_sample: false },
  { input: '6\n1 2 3 1 1 1', output: '3', is_sample: false },
  { input: '6\n2 3 1 1 1 1', output: '3', is_sample: false },
  { input: '6\n5 0 0 0 0 1', output: '1', is_sample: false },
  { input: '7\n2 2 2 2 2 2 1', output: '3', is_sample: false },
  { input: '7\n4 1 1 1 1 1 1', output: '2', is_sample: false },
  { input: '7\n1 3 1 1 4 1 1', output: '3', is_sample: false },
  { input: '8\n2 3 0 1 4 1 1 1', output: '3', is_sample: false },
  { input: '8\n3 2 1 0 4 2 1 1', output: '4', is_sample: false },
  { input: '5\n4 0 0 0 0', output: '1', is_sample: false },
  { input: '5\n1 2 1 1 1', output: '3', is_sample: false },
  { input: '9\n2 1 1 1 1 1 1 1 1', output: '8', is_sample: false },
  { input: '9\n3 4 2 1 1 1 1 1 1', output: '3', is_sample: false },
  { input: '10\n2 3 1 1 1 1 4 1 1 1', output: '4', is_sample: false },
  { input: '10\n5 4 3 2 1 0 0 0 0 0', output: '2', is_sample: false }
]
,
      }
    ];













 